// Code generated by entc, DO NOT EDIT.

package crud

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// A is the model entity for the A schema.
type A struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// A holds the value of the "a" field.
	A int `json:"a,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*A) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // a
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the A fields.
func (a *A) assignValues(values ...interface{}) error {
	if m, n := len(values), len(a.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field a", values[0])
	} else if value.Valid {
		a.A = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this A.
// Note that, you need to call A.Unwrap() before calling this method, if this A
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *A) Update() *AUpdateOne {
	return (&AClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *A) Unwrap() *A {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("crud: A is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *A) String() string {
	var builder strings.Builder
	builder.WriteString("A(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", a=")
	builder.WriteString(fmt.Sprintf("%v", a.A))
	builder.WriteByte(')')
	return builder.String()
}

// As is a parsable slice of A.
type As []*A

func (a As) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
